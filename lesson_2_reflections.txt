What happens when you initialize a repository? Why do you need to do it?

When a repo is initialized, a .git directory containing metadata about the repo is generated. This is necesarry to store all of the history of the repo which I think can later be used to restore any of the versions generated.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is not a directory but a logical set of files that are related in some way and will be together if a commit is done. The value it offers is the possibility of adding the files you believe must be commited altogether and when you're sure about it, make the commit.

How can you use the staging area to make sure you have one commit per logical change?

The staging area can be compared to both the latest commit and to the file in the working directory so you can validate the number of logical changes compared to the latest commit before you make a new commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches can help whenever you have stable versions of a program and want to preserve them as they were. Branch will allow to have a different branch per version in this case.

How do the diagrams help you visualize the branch structure?

Diagrams are really helpful cause they allow us to see easily how the commits relate to each other.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging 2 branches together is to have is to combine in one of the branches all of the changes made to the files. The representation done in the diagrams helps us to understand every commit performed in the branches we have created and to understand clearly the parent of each commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of Git automatic merging is that you don't have to manually find all the differences in the files to get to the desired merged version, the cons are that when you do it manually you're completely aware of the differences introduced.